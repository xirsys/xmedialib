defmodule XMediaLib.ZrtpComplexTest do
  use ExUnit.Case
  alias XMediaLib.Zrtp
  alias XMediaLib.ZrtpFsm
  alias XMediaLib.ZrtpSchema.{Hello, Commit, DHPart2, Confirm1}

  setup do
    # Hash vectors
    h1 =
      <<152, 154, 62, 17, 91, 59, 159, 56, 94, 85, 78, 21, 208, 79, 160, 223, 4, 98, 78, 102, 241,
        157, 227, 166, 215, 133, 35, 99, 115, 241, 252, 34>>

    h2 =
      <<30, 245, 116, 43, 215, 16, 39, 7, 110, 252, 252, 176, 151, 231, 112, 74, 81, 230, 239,
        191, 27, 210, 241, 137, 170, 241, 115, 159, 54, 127, 146, 20>>

    h3 =
      <<129, 243, 142, 173, 184, 37, 87, 24, 183, 74, 187, 211, 153, 46, 93, 116, 222, 159, 1,
        129, 229, 255, 105, 246, 99, 135, 100, 83, 62, 176, 235, 74>>

    # HELLO data
    hello_message = %Hello{
      clientid: "GNU ZRTP4J 2.1.0",
      h3: h3,
      zid: <<12, 18, 241, 209, 181, 195, 98, 133, 85, 240, 101, 201>>,
      s: 0,
      m: 0,
      p: 0,
      hash: ["S256"],
      cipher: ["AES1"],
      auth: ["HS32", "HS80"],
      keyagr: ["DH3k", "Mult"],
      sas: ["B32 "],
      mac: <<206, 91, 237, 147, 204, 255, 184, 239>>
    }

    hello_zrtp = %Zrtp{sequence: 1, ssrc: 2_197_971_733, message: hello_message}

    # COMMIT data
    commit_message = %Commit{
      h2: h2,
      zid: <<12, 18, 241, 209, 181, 195, 98, 133, 85, 240, 101, 201>>,
      hash: "S256",
      cipher: "AES1",
      auth: "HS32",
      keyagr: "DH3k",
      sas: "B32 ",
      hvi:
        <<47, 192, 193, 234, 25, 118, 126, 42, 0, 241, 125, 53, 60, 122, 157, 5, 211, 171, 245,
          63, 113, 147, 58, 107, 12, 143, 154, 68, 86, 117, 187, 40>>,
      nonce: nil,
      keyid: nil,
      mac: <<25, 0, 51, 120, 101, 107, 177, 124>>
    }

    commit_zrtp = %Zrtp{sequence: 3, ssrc: 2_197_971_733, message: commit_message}

    # DHPART2 data
    dhpart2_message = %DHPart2{
      h1:
        <<50, 11, 151, 90, 234, 110, 70, 186, 161, 209, 67, 93, 197, 140, 2, 30, 65, 221, 70, 65,
          130, 98, 118, 42, 132, 229, 100, 162, 236, 93, 114, 241>>,
      rs1_idi: <<22, 38, 97, 78, 137, 5, 28, 82>>,
      rs2_idi: <<237, 173, 46, 63, 159, 117, 201, 77>>,
      auxsecretidi: <<8, 33, 19, 160, 92, 32, 19, 238>>,
      pbxsecretidi: <<81, 81, 204, 168, 177, 80, 21, 72>>,
      pvi:
        <<51, 136, 103, 93, 43, 31, 149, 20, 162, 217, 218, 62, 88, 101, 149, 229, 173, 75, 10,
          209, 64, 209, 207, 170, 156, 99, 3, 21, 251, 52, 93, 134, 150, 125, 85, 30, 94, 181,
          245, 212, 235, 9, 21, 56, 248, 90, 122, 101, 76, 27, 255, 207, 88, 196, 56, 184, 22, 17,
          120, 147, 60, 236, 255, 55, 18, 184, 246, 254, 98, 201, 146, 93, 78, 8, 119, 140, 104,
          67, 44, 156, 224, 223, 59, 158, 104, 143, 109, 150, 177, 192, 206, 48, 190, 71, 213,
          116, 222, 113, 226, 222, 235, 227, 200, 9, 234, 196, 111, 7, 30, 130, 234, 70, 194, 255,
          224, 44, 143, 61, 55, 121, 82, 127, 241, 231, 111, 146, 51, 118, 23, 138, 153, 19, 200,
          243, 91, 137, 73, 167, 84, 33, 239, 78, 122, 240, 86, 14, 29, 59, 86, 70, 209, 177, 245,
          64, 10, 73, 129, 179, 255, 90, 13, 200, 177, 101, 97, 60, 250, 238, 31, 163, 110, 232,
          199, 87, 218, 223, 146, 74, 221, 246, 208, 135, 77, 79, 162, 102, 96, 81, 248, 19, 126,
          23, 245, 233, 122, 131, 183, 74, 218, 200, 138, 16, 144, 223, 246, 109, 215, 165, 53,
          62, 115, 244, 92, 206, 83, 27, 120, 195, 231, 68, 241, 45, 37, 85, 91, 51, 170, 99, 142,
          174, 6, 130, 209, 109, 104, 202, 38, 116, 214, 105, 20, 113, 26, 32, 96, 207, 147, 180,
          70, 142, 247, 103, 101, 240, 61, 223, 35, 69, 25, 123, 22, 132, 104, 245, 186, 58, 51,
          200, 193, 233, 160, 230, 143, 22, 150, 136, 196, 55, 194, 184, 205, 24, 88, 146, 251,
          116, 163, 191, 28, 169, 73, 111, 165, 235, 253, 58, 235, 102, 29, 238, 254, 227, 151,
          130, 205, 135, 227, 164, 169, 64, 121, 7, 8, 3, 225, 207, 160, 8, 210, 243, 131, 164,
          163, 172, 2, 132, 155, 199, 224, 253, 238, 51, 167, 54, 214, 150, 146, 31, 122, 33, 93,
          130, 211, 53, 7, 212, 80, 199, 214, 234, 199, 150, 34, 132, 61, 88, 63, 225, 175, 135,
          214, 61, 6, 58, 213, 174, 26, 236, 27, 74, 69, 23, 231, 249, 124, 130, 127, 134, 235,
          175, 26, 109, 81, 82>>,
      mac: <<136, 186, 70, 225, 126, 85, 81, 75>>
    }

    # CONFIRM1 data
    confirm1_message = %Confirm1{
      conf_mac: <<148, 85, 245, 187, 36, 114, 4, 245>>,
      cfb_init_vect: <<27, 255, 83, 15, 219, 187, 180, 150, 86, 252, 19, 114, 15, 137, 228, 193>>,
      encrypted_data:
        <<42, 194, 141, 49, 6, 235, 134, 46, 114, 51, 142, 61, 187, 35, 120, 228, 210, 137, 88,
          52, 234, 86, 24, 37, 117, 95, 151, 114, 171, 242, 12, 246, 82, 13, 76, 137, 3, 214, 248,
          95>>
    }

    confirm1_zrtp = %Zrtp{sequence: 5, ssrc: 2_197_971_733, message: confirm1_message}

    {:ok,
     %{
       hello_zrtp: hello_zrtp,
       hello_message: hello_message,
       commit_zrtp: commit_zrtp,
       confirm1_zrtp: confirm1_zrtp,
       dhpart2_message: dhpart2_message,
       h1: h1,
       h2: h2
     }}
  end

  test "Check that we can confirm HELLO message integrity based on H2", %{
    hello_zrtp: hello_zrtp,
    h2: h2
  } do
    assert ZrtpFsm.verify_hmac(hello_zrtp, h2)
  end

  test "Check that we can confirm COMMIT message integrity based on H1", %{
    commit_zrtp: commit_zrtp,
    h1: h1
  } do
    assert ZrtpFsm.verify_hmac(commit_zrtp, h1)
  end

  test "Check that we CAN NOT confirm DHPart1 message integrity based on Confirm1's H0 (cannot decode it)",
       %{confirm1_zrtp: confirm1_zrtp} do
    refute ZrtpFsm.verify_hmac(confirm1_zrtp, nil)
  end

  test "Compute hvi which will be used within COMMIT message", %{
    hello_message: hello_message,
    dhpart2_message: dhpart2_message
  } do
    assert <<191, 42, 166, 117, 108, 247, 80, 187, 84, 5, 165, 235, 67, 92, 41, 134, 220, 5, 136,
             28, 64, 33, 206, 232, 225, 82, 115, 165, 37, 76, 197,
             111>> ==
             ZrtpFsm.calculate_hvi(hello_message, dhpart2_message, fn data ->
               :crypto.hash(:sha256, data)
             end)
  end
end
